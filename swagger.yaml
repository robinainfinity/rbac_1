# yet another markup language
openapi: 3.0.0
info:
  title: RBAC API
  version: 1.0.0
  description: API for Role-Based Access Control (RBAC)
servers:
  - url: http://localhost:5000
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []
paths:
  /roles:
    get:
      summary: Get all roles
      tags:
        - Roles
      responses:
        '200':
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: admin
    post:
      summary: Create a new role
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: admin
      responses:
        '201':
          description: Role created successfully
        '400':
          description: Invalid request

  /permissions:
    get:
      summary: Get all permissions
      tags:
        - Permissions
      responses:
        '200':
          description: A list of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: create_user
    post:
      summary: Create a new permission
      tags:
        - Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: create_user
      responses:
        '201':
          description: Permission created successfully
        '400':
          description: Invalid request

  /role-permissions/assign:
    post:
      summary: Assign a permission to a role
      tags:
        - Role Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleName:
                  type: string
                  example: admin
                permissionName:
                  type: string
                  example: create_role
      responses:
        '201':
          description: Permission assigned successfully
        '400':
          description: Invalid request

  /role-permissions/{roleName}:
    get:
      summary: Get permissions for a role
      tags:
        - Role Permissions
      parameters:
        - in: path
          name: roleName
          required: true
          schema:
            type: string
            example: admin
          description: The name of the role
      responses:
        '200':
          description: A list of permissions for the role
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: admin
                    name:
                      type: string
                      example: create_user

  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      security: [] # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  example: password123
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid request or user already exists

  /users/login:
    post:
      summary: User login
      tags:
        - Users
      security: [] # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials

  /users/getallusers:
    get:
      summary: Get all users with their roles
      tags:
        - Users
      responses:
        '200':
          description: A list of users with roles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: John Doe
                    email:
                      type: string
                      example: john.doe@example.com
                    role:
                      type: string
                      example: admin

  /users/assign-role:
    post:
      summary: Assign role to a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: John Doe
                roleName:
                  type: string
                  example: admin
      responses:
        '200':
          description: Role successfully assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Role 'admin' successfully assigned to user 'John Doe'
        '400':
          description: Invalid request
        '404':
          description: User or role not found
